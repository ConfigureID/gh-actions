name: Deploy
description: "Deploys an static application to a cloud service"

# Action to deploy a static application to a Cloud Service (supports Github Pages and GCS)
# It can DEPLOY a build created on a previous step or PROMOTE an existing release to an specified environment (eg. integration, staging, production)..
# Steps:
# - Creates a Github Deployment object with status "start" and the name
# - Downloads an artifact from a previous step OR an asset from an existing release.
# - Deploy the files to the specified path ("namespace/environment_name" or "to") in Github Pages or GCS
# - Marks the Github Deployment object as "finished" with the status of the workflow (success, failed)
inputs:
  namespace:  
    description: 'The project namespace (eg adidas). Used as a prefix for the publish directory'
    required: true
  environment_name:  
    description: 'The environment name to create a deployment.'
    required: true
  to:  
    description: 'Directory where the project must be deployed to. If not specified namespace/environment_name is used'
    required: false
    default: ''
  release:
    description: 'If defined, the name of the release (eg. v1.4.3) that will be PROMOTED. If not defined, a build from a previous step is DEPLOYED'
    required: false
    default: ''
  artifact_name:
    description: 'In PROMOTE mode, the name of the release asset (defaults to <repo-name>-<release>.zip). In DEPLOY mode, the name of the artifact created in a previous step (defaults to build-output)'
    required: false
    default: ''
  github_token:
    description: 'GitHub token with permissions to push to the gh-pages branch'
    required: false
    default: ${{ github.token }}
  cloud_service:
    description: 'Cloud Service to deploy to (supports GH Pages and GCP)'
    required: true
  cloud_credentials:
    description: 'Credentials of the cloud service where the application will be deployed/promoted to'
    required: false
  cloud_bucket:
    description: 'Name of the Cloud service (eg. GCS) bucket'
    required: false
  base_url:
    description: 'Base URL where the deployment can be accessed'
    required: false
  cache:
    description: 'Enable or disable cache'
    required: true
  allowed_destination:
    description: 'Regex with the allowed destinations. Others will fail'
    required: false
    default: '[/]prod$|[/]staging$|[/]dev$|([/](branches|releases)[/][A-Za-z0-9._%+-\/]+$)'
  exclude:
    description: 'Regrex expression to exclude files'
    required: false
    default: '.*\.md$|\.gitignore$|\.git/.*$|gha-creds-+\w+\.+json*$|\.github/.*$'
  delete:
    description: 'Delete extra files in the destination not found in the source'
    required: false
    default: 'true'
  cloud_lb:
    description: 'Load Balancer Name'
    required: false

runs:
  using: "composite"

  steps:
    - name: Set mode variables
      id: mode
      shell: bash
      run: |
        if [ "${{ inputs.release }}" != '' ]; then
          echo "Promoting release ${{ inputs.release }}";
          echo "ref=tags/${{ inputs.release }}" >> $GITHUB_OUTPUT;
          echo "artifact_name=${{ inputs.artifact_name != '' &&  inputs.artifact_name  || format('{0}-{1}.zip', github.event.repository.name, inputs.release) }}" >> $GITHUB_OUTPUT;
        else
          echo "Deploying build created in previous step";
          echo "ref=${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}" >> $GITHUB_OUTPUT;
          echo "artifact_name=${{ inputs.artifact_name != '' && inputs.artifact_name || 'build-output' }}" >> $GITHUB_OUTPUT;
        fi

    - name: Start build deployment
      uses: bobheadxi/deployments@v1.3.0
      id: deployment
      with:
        step: start
        token: ${{ inputs.github_token }}
        env: ${{ inputs.environment_name }}
        ref: ${{ steps.mode.outputs.ref }}

    - name: Download build artifact
      if: ${{ inputs.release == '' }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ steps.mode.outputs.artifact_name }}
        path: ./tmp

    - name: Download release asset
      if: ${{ inputs.release != '' }}
      uses: dsaltares/fetch-gh-release-asset@1.1.0
      with:
        version: 'tags/${{ inputs.release }}'
        file: ${{ steps.mode.outputs.artifact_name }}
        token: ${{ inputs.github_token }}

    - name: Unzip release
      if: ${{ inputs.release != '' }}
      uses: montudor/action-zip@v1
      with:
        args: unzip -qq ${{ steps.mode.outputs.artifact_name }} -d ./tmp

    # Copies the current action's repository to the specified location, 
    # so other actions from the same repo may be called (see sync below)
    # This allows us to use the same version of the action for both "deploy" (the current action) and sync
    - name: Copy custom action repository
      shell: bash
      run: bash ${{ github.action_path }}/../scripts/copy_actions_repo.sh
      env:
        CUSTOM_ACTION_REPO_SUBDIRECTORY: ${{ github.action_path }}
        DESTINATION_PATH: ${{ github.workspace }}/.github/actions

    # Sync to Cloud Service
    - name: Sync to Cloud Service
      id: sync
      uses: ./.github/actions/ConfigureID/gh-actions/sync
      with:
        source_dir: tmp
        namespace: ${{ inputs.namespace }}
        environment_name: ${{ inputs.environment_name }}
        base_url: ${{ inputs.base_url }}
        cloud_service: '${{ inputs.cloud_service }}'
        cloud_bucket: '${{ inputs.cloud_bucket }}'
        cloud_credentials: '${{ inputs.cloud_credentials }}'
        cloud_lb: '${{ inputs.cloud_lb }}'
        allowed_destination: '${{ inputs.allowed_destination }}'
        exclude: '${{ inputs.exclude }}'
        cache: ${{ inputs.cache }}
        delete: ${{ inputs.delete }}
    
    - name: Update deployment status
      if: always()
      uses: bobheadxi/deployments@v1.3.0
      with:
        step: finish
        token: ${{ inputs.github_token }}
        status: ${{ job.status }}
        env: ${{ steps.deployment.outputs.env }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: ${{ steps.sync.outputs.url }}
