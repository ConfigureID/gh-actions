name: Promote to Environment

# Action to Promote a release to a specified environment (eg. integration, staging, production)
# It downloads an existing release file from Github.
# If you prefer to build it when promoting, use "npm-build" workflow and "deploy" action instead
inputs:
  tag:
    description: 'Release version tag'
    required: true
    type: string
  release_filename:
    description: 'Name of the release file'
    required: true
    type: string
  namespace:  
    description: 'The project namespace (eg adidas). Used as a prefix for the publish directory'
    required: true
    type: string
  environment_name:  
    description: 'The environment name to create a deployment.'
    required: true
    type: string
  to:
    description: 'Directory where the project must be deployed to. If not specified namespace/environment_name is used'
    required: false
    default: ''
    type: string
  github_token:
    description: 'GitHub token with permissions to push to the gh-pages branch'
    required: false
    default: ${{ github.token }}
  cloud_service:
    description: 'Cloud Service to deploy to (supports GH Pages and GCP)'
    required: true
    type: string
  cloud_credentials:
    description: 'Credentials of the cloud service where the release will be promoted to'
    required: false
    type: string
  cloud_bucket:
    description: 'Name of the Cloud service (eg. GCS) bucket'
    required: false
    type: string
  base_url:
    description: 'Base URL where the deployment can be accessed'
    required: false
    type: string
  cache:
    description: 'Enable or disable cache'
    required: false
    type: bool
    default: true
  allowed_destination:
    description: 'Regex with the allowed destinations. Others will fail'
    required: false
    type: string
  exclude:
    description: 'Regrex expression to exclude files'
    required: false
    type: string
  delete:
    description: 'Delete extra files in the destination not found in the source'
    required: false
    type: bool
  cloud_lb:
    description: 'Load Balancer Name'
    required: false
    type: string

runs:
  using: "composite"

  steps:
    - name: Start deployment
      uses: bobheadxi/deployments@v1.3.0
      id: deployment
      with:
        step: start
        token: ${{ inputs.github_token }}
        env: ${{ inputs.environment_name }}
        ref: tags/${{ inputs.tag }}

    - name: Download release
      uses: dsaltares/fetch-gh-release-asset@1.1.0
      with:
        version: 'tags/${{ inputs.tag }}'
        file: ${{ inputs.release_filename }}
        token: ${{ inputs.github_token }}

    - name: Unzip release
      uses: montudor/action-zip@v1
      with:
        args: unzip -qq ${{ inputs.release_filename }} -d ./tmp

    # Copies the current action's repository to the specified location, 
    # so other actions from the same repo may be called (see sync below)
    # This allows us to use the same version of the action for both "deploy" (the current action) and sync
    - name: Copy custom action repository
      shell: bash
      run: bash ${{ github.action_path }}/../scripts/copy_actions_repo.sh
      env:
        CUSTOM_ACTION_REPO_SUBDIRECTORY: ${{ github.action_path }}
        DESTINATION_PATH: ${{ github.workspace }}/.github/actions

    # Sync to Cloud Service
    - name: Sync to Cloud Service
      id: sync
      uses: ./.github/actions/ConfigureID/gh-actions/sync
      with:
        source_dir: tmp
        namespace: ${{ inputs.namespace }}
        environment_name: ${{ inputs.environment_name }}
        base_url: ${{ inputs.base_url }}
        cloud_service: '${{ inputs.cloud_service }}'
        cloud_bucket: '${{ inputs.cloud_bucket }}'
        cloud_credentials: '${{ inputs.cloud_credentials }}'
        cloud_lb: '${{ inputs.cloud_lb }}'
        allowed_destination: '${{ inputs.allowed_destination }}'
        exclude: '${{ inputs.exclude }}'
        cache: ${{ inputs.cache }}
        delete: ${{ inputs.delete }}

    - name: Update deployment status
      if: always()
      uses: bobheadxi/deployments@v1.3.0
      with:
        step: finish
        token: ${{ inputs.github_token }}
        status: ${{ job.status }}
        env: ${{ steps.deployment.outputs.env }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: ${{ steps.sync.outputs.url }}
